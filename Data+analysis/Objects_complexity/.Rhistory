library(png)
library(grid)
library(ggplot2)
library(xtable)
library(tidyverse)
library(here)
library(lme4)
library(papaja)
library(knitr)        # for knitting RMarkdown
data <- read_csv(here("data", "data.csv"))
df <- data %>% filter(block == "blockpics") %>% select("subject", "block", "response", "pic") %>%
mutate(response = as.factor(response), pic = as.factor(pic))
df %>% group_by(pic) %>% summarise(n = n())
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
View(df)
df %>% group_by(pic) %>% summarise(n = n())
df %>% group_by(pic) %>% summarise(n = n(), mean = mean(response))
df %>% group_by(pic) %>% summarise(n = n(), mean = mean(response))
df %>% group_by(pic) %>% summarize(mean = mean(response))
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop = F,
fig.pos = "tb", fig.path='figs/',
echo=F, warning=F, cache=F,
message=F, sanitize = T)
library(png)
library(grid)
library(ggplot2)
library(xtable)
library(tidyverse)
library(here)
library(lme4)
library(papaja)
library(knitr)        # for knitting RMarkdown
data <- read_csv(here("data", "pilot_data12.csv"))
df <- data %>% filter(block == "blockpics") %>% select("subject", "block", "response", "pic") %>%
mutate(response = as.factor(response), pic = as.factor(pic))
df %>% group_by(pic) %>% summarize(mean = mean(response))
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
View(df)
df %>% group_by(pic) %>% summarize(mean = mean(response))
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(response))
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response))
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)))
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response))) %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response)))
library(dplyr)
library(stringr)
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
object_id = str_extract(pic, "(?<=list\\d+/)\\d+"),
seed = str_extract(pic, "(?<=-)\\d+(?=-\\d+-)"),
num_extrusions = str_extract(pic, "(?<=-\\d+-)\\d+(?=-)"),
material = str_extract(pic, "(?<=-)([a-zA-Z]+\\d*)"),
beveling = ifelse(str_detect(pic, "B"), 1, 0)
)
# Extracting components
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
pic_details = str_extract(pic, "(?<=list\\d/)[^\\.]+"),  # Extract everything after 'listX/'
split_details = str_split(pic_details, "-", simplify = TRUE),
object_id = split_details[,1],
seed = split_details[,2],
num_extrusions = split_details[,3],
material = split_details[,4] %>% str_replace("\\d*$", ""), # Remove trailing digits from material
beveling = ifelse(str_detect(pic, "B"), 1, 0)
) %>%
select(-pic_details, -split_details)  # Remove intermediate columns
View(df)
# Extracting components
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
pic_details = str_extract(pic, "(?<=list\\d/)[^\\.]+"),  # Extract everything after 'listX/'
split_details = str_split(pic_details, "-", simplify = TRUE),
object_id = split_details[,1],
seed = split_details[,2],
num_extrusions = split_details[,3],
material = split_details[,4] , # Remove trailing digits from material
beveling = ifelse(str_detect(pic, "B"), 1, 0)
) %>%
select(-pic_details, -split_details)  # Remove intermediate columns
View(df)
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#add error bars
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
ggplot(df, aes(x = response)) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
data <- read_csv(here("data", "pilot_data12.csv"))
df <- data %>% filter(block == "blockpics") %>% select("subject", "block", "response", "pic") %>%
mutate(pic = as.factor(pic))
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
pic_details = str_extract(pic, "(?<=list\\d/)[^\\.]+"),  # Extract everything after 'listX/'
split_details = str_split(pic_details, "-", simplify = TRUE),
object_id = split_details[,1],
seed = split_details[,2],
num_extrusions = split_details[,3],
material = split_details[,4] ,
beveling = ifelse(str_detect(pic, "B"), 1, 0)
) %>%
select(-pic_details, -split_details)
## %>% str_replace("\\d*$", "")  # Remove trailing digits from material
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
data <- read_csv(here("data", "pilot_data12.csv"))
df <- data %>% filter(block == "blockpics") %>% select("subject", "block", "response", "pic") %>%
mutate(pic = as.factor(pic))
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
pic_details = str_extract(pic, "(?<=list\\d/)[^\\.]+"),  # Extract everything after 'listX/'
split_details = str_split(pic_details, "-", simplify = TRUE),
object_id = split_details[,1],
seed = split_details[,2],
num_extrusions = split_details[,3],
material = split_details[,4] ,
beveling = ifelse(str_detect(pic, "B"), 1, 0)
) %>%
select(-pic_details, -split_details)
## %>% str_replace("\\d*$", "")  # Remove trailing digits from material
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
#add error bars
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
ggplot(df, aes(x = as.factor(num_extrusions), y = response)) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
labs(title = "Response by Number of Extrusions", x = "Number of Extrusions", y = "Response")
ggplot(df, aes(x = material, y = response)) +
geom_violin(fill = "lightgreen", alpha = 0.6) +
theme_minimal() +
labs(title = "Response by Material", x = "Material", y = "Response") +
coord_flip()  # Flips for better readability if many materials
# use actual response values with material as color
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean, fill = material)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop = F,
fig.pos = "tb", fig.path='figs/',
echo=F, warning=F, cache=F,
message=F, sanitize = T)
library(png)
library(grid)
library(ggplot2)
library(xtable)
library(tidyverse)
library(here)
library(lme4)
library(papaja)
library(knitr)        # for knitting RMarkdown
library(dplyr)
library(stringr)
data <- read_csv(here("data", "pilot_data12.csv"))
df <- data %>% filter(block == "blockpics") %>% select("subject", "block", "response", "pic") %>%
mutate(pic = as.factor(pic))
df <- df %>%
mutate(
list_number = str_extract(pic, "list\\d+") %>% str_remove("list"),
pic_details = str_extract(pic, "(?<=list\\d/)[^\\.]+"),  # Extract everything after 'listX/'
split_details = str_split(pic_details, "-", simplify = TRUE),
object_id = split_details[,1],
seed = split_details[,2],
num_extrusions = split_details[,3],
material = split_details[,4] ,
beveling = ifelse(str_detect(pic, "B"), 1, 0)
) %>%
select(-pic_details, -split_details)
## %>% str_replace("\\d*$", "")  # Remove trailing digits from material
df %>% group_by(pic) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
df %>% filter (pic == "list4/11-34-9-fabric05-AB.png")
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
# use actual response values with material as color
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean, fill = material)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response)))
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% mutate(material = df$material)
# use actual response values instead of the mean (do not summaraize) with material as color
df %>% ggplot(aes(x = object_id, y = as.numeric(response), fill = material)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = as.numeric(response) - sd(as.numeric(response)), ymax = as.numeric(response) + sd(as.numeric(response)), width = 0.2)
df %>% ggplot(aes(x = object_id, y = as.numeric(response), fill = material)) + geom_bar(stat = "identity") + theme_minimal()
df %>% ggplot(aes(x = object_id, y = as.numeric(response), fill = material)) + geom_bar(stat = "identity")
# use actual response values instead of the mean (do not summaraize) with material as color
df %>%
ggplot(aes(x = factor(object_id), y = as.numeric(response), color = material)) +
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter to avoid overplotting
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Response Distribution by Object ID", x = "Object ID", y = "Response")
df <- df %>%
mutate(material = str_trim(material),  # Remove leading/trailing spaces
material = case_when(
str_detect(material, "printed *metal007") ~ "printedmetal007",
str_detect(material, "painted *metal007") ~ "paintedmetal007",
str_detect(material, "corrugated *steel") ~ "corrugatedsteel",
str_detect(material, "fabric *05") ~ "fabric05",
str_detect(material, "metal007") ~ "metal007",
str_detect(material, "074") ~ "074",  # Adjust based on what this represents
TRUE ~ material  # Keep unchanged if no match
))
unique(df$material)
df <- df %>%
mutate(material = str_trim(material),  # Remove leading/trailing spaces
material = case_when(
str_detect(material, "printed *metal007") ~ "printedmetal007",
str_detect(material, "painted *metal007") ~ "paintedmetal007",
str_detect(material, "corrugated *steel") ~ "corrugatedsteel",
str_detect(material, "fabric *05") ~ "fabric05",
str_detect(material, "metal007") ~ "metal007",
str_detect(material, "074") ~ "074",  # Adjust based on what this represents
TRUE ~ material  # Keep unchanged if no match
))
unique(df$material)
df <- df %>%
mutate(material = str_trim(material)
df <- df %>%
df <- df %>%
mutate(material = str_trim(material))
unique(df$material)
df <- df %>%
mutate(material = str_trim(material),  # Remove leading/trailing spaces
material = str_replace_all(material, " +", ""),  # Remove extra spaces within words
material = case_when(
material %in% c("printedmaterial007", "printedmaterial 007", "printed material 007") ~ "printedmaterial007",
material == "paintedmetal007" ~ "paintedmetal007",
material == "corrguatedsteel" ~ "corrugatedsteel",  # Fix typo
material == "fabric05" ~ "fabric05",
material == "metal007" ~ "metal007",
material == "007" ~ "metal007",  # Standardizing "007" as "metal007" if it represents the same material
material == "05" ~ "fabric05",  # Standardizing "05" as "fabric05" if that's correct
material == "074" ~ "074",  # Keep if valid, otherwise clarify its meaning
material == "031" ~ "031",  # Same for "031"
TRUE ~ material  # Keep unchanged if not listed
))
# Check the cleaned values
unique(df$material)
df <- df %>%
mutate(material = str_trim(material),  # Remove leading/trailing spaces
material = str_replace_all(material, " +", ""),  # Remove extra spaces within words
material = case_when(
material %in% c("printedmaterial007","paintedmetal007", "printedmaterial 007", "printed material 007") ~ "printedmaterial007",
material == "corrguatedsteel" ~ "corrugatedsteel",  # Fix typo
material == "fabric05" ~ "fabric05",
material == "metal007" ~ "metal007",
material == "007" ~ "metal007",  # Standardizing "007" as "metal007" if it represents the same material
material == "05" ~ "fabric05",  # Standardizing "05" as "fabric05" if that's correct
material == "074" ~ "074",  # Keep if valid, otherwise clarify its meaning
material == "031" ~ "031",  # Same for "031"
TRUE ~ material  # Keep unchanged if not listed
))
# Check the cleaned values
unique(df$material)
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#add error bars
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
# use actual response values instead of the mean (do not summaraize) with material as color
df %>%
ggplot(aes(x = factor(object_id), y = as.numeric(response), color = material)) +
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter to avoid overplotting
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Response Distribution by Object ID", x = "Object ID", y = "Response")
#add error bars
df %>% group_by(material) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
#add error bars
df %>% group_by(material) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = material, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
ggplot(df, aes(x = as.numeric(response))) +
geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution of Responses", x = "Response", y = "Count")
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#add error bars
df %>% group_by(object_id) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = object_id, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
# use actual response values instead of the mean (do not summaraize) with material as color
df %>%
ggplot(aes(x = factor(object_id), y = as.numeric(response), color = material)) +
geom_jitter(width = 0.2, alpha = 0.7) +  # Jitter to avoid overplotting
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Response Distribution by Object ID", x = "Object ID", y = "Response")
#add error bars
df %>% group_by(material) %>% summarize(count = n(), mean = mean(as.numeric(response)), sd = sd(as.numeric(response))) %>% ggplot(aes(x = material, y = mean)) + geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2)
